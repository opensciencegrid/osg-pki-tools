#!/usr/bin/python

"""
This script submits a host certificate request for an unauthenticated
user.
"""

import urllib
import httplib
import sys
import ConfigParser
import simplejson
import base64
import os
from optparse import OptionParser
import M2Crypto
import textwrap
import traceback
import subprocess
from ssl import SSLError
from pprint import pprint

from osgpkitools import OSGPKIUtils
from osgpkitools import ConnectAPI
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.OSGPKIUtils import CreateOIMConfig
from osgpkitools.OSGPKIUtils import check_response_500
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import check_failed_response
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.OSGPKIUtils import handle_empty_exceptions
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import print_uncaught_exception
from osgpkitools.ExceptionDefinitions import *


# Set up Option Parser
#

def parse_args():
    """This function parses all the arguments, validates them and then stores
    them in a dictionary that is used throughout in the script."""

    parser = OptionParser()
    parser.add_option(
        '-c',
        '--csr',
        action='store',
        dest='csr',
        default=None,
        help='Specify CSR name (default = gennew.csr)',
        metavar='CSR',
        )
    parser.add_option(
        '-o',
        '--outkeyfile',
        action='store',
        dest='keyfile',
        help='Specify the output filename for the retrieved user certificate.\
             \nDefault is ./hostkey.pem'
            ,
        metavar='OUTPUT KEYFILE',
        default='hostkey.pem',
        )
    parser.add_option(
        '-v',
        '--vo',
        action='store',
        dest='vo',
        help='Specify the VO for the host request'
            ,
        metavar='VO name',
        default=None,
        )
    parser.add_option(
        '-y',
        '--cc',
        action='store',
        dest='cc_list',
        help='Specify the CC list(the email id\'s to be CCed). \
             Separate values by \',\''
            ,
        metavar='CC LIST',
        default='',
        )
    parser.add_option(
        '-m',
        '--comment',
        action='store',
        dest='comment',
        help='The comment to be added to the request',
        metavar='COMMENT',
        default='',
        )
    parser.add_option(
        '-H',
        '--hostname',
        action='store',
        dest='hostname',
        help='Specify a hostname for CSR (FQDN)',
        metavar='CN',
        default=None
        )
    parser.add_option(
        '-a',
        '--altname',
        action='append',
        dest='alt_names',
        help='Specify an alternative hostname for the CSR (FQDN). May be used more than once',
        metavar='HOSTNAME',
        default=None
        )
    parser.add_option(
        '-e',
        '--email',
        action='store',
        dest='email',
        help='Email address to receive certificate',
        metavar='EMAIL',
        )
    parser.add_option(
        '-n',
        '--name',
        action='store',
        dest='name',
        help='Name of user receiving certificate',
        metavar='NAME',
        )
    parser.add_option(
        '-p',
        '--phone',
        action='store',
        dest='phone',
        help='Phone number of user receiving certificate',
        metavar='PHONE',
        )
    parser.add_option(
        '-t',
        '--timeout',
        action='store',
        dest='timeout',
        help='Specify the timeout in minutes',
        default=5,
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='Run in test mode',
        default=False,
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        default='./',
        help="Write the output files to this directory",
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    (args, values) = parser.parse_args()

    #print version info and exit.
    if args.version_info:
        version_info()
        sys.exit(0)

    if not args.phone:
        parser.error('-p/--phone argument required')
    if not args.name:
        parser.error('-n/--name argument required')
    if not args.email:
        parser.error('-e/--email argument required')
    if not args.hostname and not args.csr:
        parser.error('-H/--hostname or -c/--csr argument required')
    if args.hostname and args.csr:
        parser.error('Both -t/--hostname and -c/--csr arguments specified. Choose one')

    if args.csr is None:
        if os.path.exists(args.keyfile):
            pem_filename = args.keyfile
            key_name = pem_filename.split("/")[-1].split(".")[-2]
            pem_filename_old = key_name + "-old.pem"
            subprocess.call(['mv',  pem_filename , pem_filename_old])
            charlimit_textwrap("Moving existing file %s to %s "
                               %(pem_filename ,pem_filename_old))
        else:
            pem_filename = args.keyfile
    else:
        charlimit_textwrap('CSR input found. Skipping creation of the primary key\n')

    hostname = args.hostname
    alt_names = args.alt_names
    email = args.email
    name = args.name
    phone = args.phone
    csr = args.csr

    cc_list = args.cc_list

    comment = args.comment

    phone_num = phone.replace('-', '')
    if not phone_num.isdigit():
        raise ValidationException("Phone number should contain \
                                  only numbers and/or '-'\n"
                                  )
    if args.csr is None:
        pass
    elif not os.path.exists(args.csr):
        raise FileNotFoundException(args.csr,
                                    'The file %s does not exist'
                                    % args.csr)

    try:
        timeout = int(args.timeout)
        if not timeout >= 0:
            charlimit_textwrap('Your timeout value cannot be a negative integer.\n')
            raise ValueError
    except ValueError:
        raise ValueError('Invalid timeout value. Please enter a non-negative integer value.\n')

    if args.write_directory:
        if args.write_directory[-1] != '/':
            args.write_directory = args.write_directory + '/'
        certdir = args.write_directory
    else:
        certdir = "./"

    OIM = args.test

    arguments = dict()
    arguments = CreateOIMConfig(OIM, **arguments)

    arguments.update({'vo': args.vo})

    if vars().has_key('args'):
        arguments.update({'args': args})
    if vars().has_key('values'):
        arguments.update({'values': values})
    if vars().has_key('cc_list'):
        arguments.update({'cc_list': cc_list})
    if vars().has_key('comment'):
        arguments.update({'comment': comment})
    if vars().has_key('pem_filename'):
        arguments.update({'pem_filename': pem_filename})
    arguments.update({'timeout': timeout})
    print 'The timeout is set to %s' % arguments['timeout']
    arguments.update({'email': email})
    arguments.update({'name': name})
    arguments.update({'phone': phone})
    arguments.update({'hostname': hostname})
    arguments.update({'alt_names': alt_names})
    arguments.update({'certdir':certdir})
    if vars().has_key('csr'):
        arguments.update({'csr': csr})
    return arguments


    # Build the connection to the web server - the request header, the parameters
    # needed and then pass them into the server
    #
    # The data returned is in JSON format so to make it a little more human
    # readable we pass it through the json module to pretty print it
    #

def connect(arguments):
    """This function accepts a dictionary consisting of all parameters and their values.
    It submits the request to the OIM server and returns the request details."""

    print '\nConnecting to server...'
    params_list = {'name': arguments['name'],
        'email': arguments['email'],
        'phone': arguments['phone'],
        'csrs': arguments['csr'],
        'request_comment': arguments['comment'],
        'request_ccs': arguments['cc_list'].split(','),
        }
    if 'vo' in arguments:
        params_list['vo'] = arguments['vo']
    params = urllib.urlencode(params_list)
    headers = {'Content-type': arguments['content_type'],
               'User-Agent': 'OIMGridAPIClient/0.1 (OIM Grid API)'}
    conn = httplib.HTTPConnection(arguments['host'])
    try:
        conn.request('POST', arguments['requrl'], params, headers)
        response = conn.getresponse()
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed: %s'
                           % (arguments['requrl'], repr(e)))
        raise e
    except Exception, e:
        charlimit_textwrap('Error during request to %s. Reason %s'
                           % (arguments['requrl'], repr(e)))
        raise e
    check_response_500(response)
    data = response.read()
    check_failed_response(data)
    conn.close()
    if simplejson.loads(data)['detail'] == 'Nothing to report' \
        and simplejson.loads(data)['status'] == 'OK' in data:
        ticket = simplejson.loads(data)['host_request_id']
        print 'Succesfully submitted'
        print 'Request Id#: %s' % ticket
    else:
        raise UnexpectedBehaviourEception("Unexpected Behavior encountered\nData received is %s" %data)
    return


if __name__ == '__main__':
    try:
        os.umask(0177)
        arguments = parse_args()
        OSGPKIUtils.start_timeout_clock(arguments['timeout']*60)
        # The two modes in which the script is run are
        # 1. The user doesn't provide a csr:
        # Here we generate a private key for the user and also a
        # certificate signing request for the user and submit it
        # it to the OIM
        # 2. The user provides a csr
        # Here we simply get rid of the end and begin certificate
        # lines of the csr and submit the request to the OIM
        cwd = None
        if arguments['csr'] is None:
            config_items = {'CN': arguments['hostname'],
                            'emailAddress': arguments['email'],
                            'alt_names': arguments['alt_names']}

            if (arguments['certdir'] != "./"):
                cwd = os.getcwd()

            if cwd != None:
                os.chdir(arguments['certdir'])

            cert_obj = OSGPKIUtils.Cert()
            cert_obj.CreatePKey(arguments['pem_filename'])
            print 'Writing key to %s%s' %(arguments['certdir'], arguments['pem_filename'])
            new_csr = cert_obj.CreateX509Request(**config_items)
            arguments['csr'] = \
                new_csr.as_pem().replace('-----BEGIN CERTIFICATE REQUEST-----\n', '')\
                                .replace('-----END CERTIFICATE REQUEST-----\n', '')
            if cwd != None:
                os.chdir(cwd)
            connect(arguments)
        else:
            csr = open(arguments['csr'], 'rb').read().replace('-----BEGIN CERTIFICATE REQUEST-----\n', '')\
                                                     .replace('-----END CERTIFICATE REQUEST-----\n', '')
            arguments.update({'csr': csr})
            capi = ConnectAPI.ConnectAPI()
            id = capi.request_unauthenticated(**arguments)
            print 'Request Id#: %s' % id
            arguments.update({'id':id})

    except EOFError, e:
        print_exception_message(e)
        sys.exit(1)
    except KeyboardInterrupt, e:
        print_exception_message(e)
        sys.exit('''Interrupted by user\n''')
    except SystemExit, e:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except SSLError, e:
        print_exception_message(e)
        sys.exit('Please check for valid certificate.\n')
    except OSError, e:
        print_exception_message(e)
        sys.exit(1)
    except KeyError, e:
        print_exception_message(e)
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed: %s' % (arguments['requrl'], repr(e)))
    except Exception_500response, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except FileNotFoundException, e:
        charlimit_textwrap(e.message + ':' + e.filename)
        sys.exit(1)
    except ValueError, e:
        print_exception_message(e)
        sys.exit(1)
    except NotOKException, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except CertificateMismatchException, e:
        print 'The number of requests made was ', e.request_num
        print 'The number of certificates received is ', e.retrieve_num
        charlimit_textwrap(e.message)
        sys.exit(1)
    except EOFError, e:
        print_exception_message(e)
        sys.exit(1)
    except BadCertificateException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except BadPassphraseException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except HandshakeFailureException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except UnexpectedBehaviourException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except InvalidOptionException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except IOError, e:
        charlimit_textwrap(e)
        sys.exit(1)
    except Exception, e:
        print_exception_message(e)
        sys.exit(1)
    sys.exit(0)
