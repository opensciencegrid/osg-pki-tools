#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
This script is used to submit multiple certifcate requests and
the intended user for the script is the GridAdmin.
This script requests certificates and then approves as well as issues them
in bulk (limit of 50 at a time).
This script works in two modes:
1) Requesting single host certificate with -H option
2) Request multiple host certificates with hostnames stored in a file -f option
"""

import httplib
import sys
import simplejson
import os
import M2Crypto
from optparse import OptionParser, OptionGroup
import subprocess
from ssl import SSLError
import tempfile

from osgpkitools import ConnectAPI
from osgpkitools import ExceptionDefinitions
from osgpkitools import OSGPKIUtils
from osgpkitools.OSGPKIUtils import CreateOIMConfig
from osgpkitools.OSGPKIUtils import extractHostname
from osgpkitools.OSGPKIUtils import extractEEC
from osgpkitools.OSGPKIUtils import get_request_count
from osgpkitools.OSGPKIUtils import check_response_500
from osgpkitools.OSGPKIUtils import check_failed_response
from osgpkitools.OSGPKIUtils import check_for_pending
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.OSGPKIUtils import check_permissions
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import print_failure_reason_exit
from osgpkitools.OSGPKIUtils import print_uncaught_exception
from osgpkitools.OSGPKIUtils import get_ssl_context

# Set up Option Parser
#

def parse_args():
    """This function parses all the arguments, validates them and then stores them
    in a dictionary that is used throughout the script."""

    usage = \
        'usage: %prog [options] arg\nUsage:%prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    group = OptionGroup(parser, 'Hostname Options',
                        '''Use either of these options.
Specify hostname as a single hostname using -H/--hostname
or specify from a file using -f/--hostfile.''')
    parser.add_option(
        '-k',
        '--pkey',
        action='store',
        dest='userprivkey',
        help="Specify Requestor's private key (PEM Format). If not specified" + \
             "will take the value of X509_USER_KEY or $HOME/.globus/userkey.pem",
        metavar='PKEY',
        default=None,
        )
    parser.add_option(
        '-c',
        '--cert',
        action='store',
        dest='usercert',
        help="Specify Requestor's certificate (PEM Format). If not specified, " + \
        "will take the value of X509_USER_CERT or $HOME/.globus/usercert.pem",
        default=None,
        metavar='CERT',
        )
    group.add_option(
        '-H',
        '--hostname',
        action='store',
        dest='hostname',
        help='Specify the hostname or service/hostname for which you want to request ' + \
        'the certificate for. If specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=None,
        )
    parser.add_option(
        '-a',
        '--altname',
        action='append',
        dest='alt_names',
        help='Specify an alternative hostname for CSR (FQDN). May be used more than ' + \
        'once and if specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=None
        )
    group.add_option(
        '-f',
        '--hostfile',
        action='store',
        dest='hostfile',
        help='Filename with one host (hostname or service/hostname and its optional,' + \
        'alternative hostnames, separated by spaces) per line',
        metavar='HOSTFILE',
        default=None,
        )
    parser.add_option(
        '-v',
        '--vo',
        action='store',
        dest='vo',
        help='Specify the VO for the host request',
        metavar='VO name',
        default=None,
        )
    parser.add_option(
        '-y',
        '--cc',
        action='store',
        dest='cc_list',
        help='Specify the CC list(the email id\'s to be CCed).' + \
             'Separate values by \',\'',
        metavar='CC List',
        default='',
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='Run in test mode',
        default=False,
        )
    parser.add_option(
        '-t',
        '--timeout',
        action='store',
        dest='timeout',
        help='Specify the timeout in minutes',
        default=5,
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        help="Write the output files to this directory",
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    parser.add_option_group(group)
    (args, values) = parser.parse_args()
    arguments = dict()

    if args.version_info:
        version_info()
        sys.exit(0)

    if not args.hostname:
        if args.hostfile is None:
            raise ExceptionDefinitions.InsufficientArgumentException("InsufficientArgumentException: " + \
                                                "Please provide hostname(-H) or file name containing hosts(-f)\n")
        else:
            hostfile = args.hostfile
    else:
        hostname = args.hostname

    try:
        timeout = int(args.timeout)
        if not timeout >= 0:
            charlimit_textwrap('Your timeout value cannot be a negative integer.\n')
            raise ValueError
    except ValueError:
        raise ValueError('Invalid timeout value. Please enter a non-negative integer value.\n')

    if args.write_directory:
        certdir = args.write_directory
        charlimit_textwrap("Writing certificate to %s" %certdir)

    else:
        certdir = './'

    if args.userprivkey is None:
        try:
            userprivkey = os.environ['X509_USER_KEY']
        except KeyError:
            if os.path.exists(str(os.environ['HOME'])
                              + '/.globus/userkey.pem'):
                userprivkey = str(os.environ['HOME']) \
                    + '/.globus/userkey.pem'
            else:
                raise ExceptionDefinitions.FileNotFoundException('Key file', 'Could not locate the private key file')
    else:
        userprivkey = args.userprivkey

    if os.path.exists(userprivkey):
        pass
    else:
        raise ExceptionDefinitions.FileNotFoundException(userprivkey, 'Could not locate the private key file')
    if args.usercert is None:
        try:
            usercert = os.environ['X509_USER_CERT']
        except KeyError:
            usercert = str(os.environ['HOME']) + '/.globus/usercert.pem'
            if os.path.exists(str(os.environ['HOME'])
                              + '/.globus/usercert.pem'):
                usercert = str(os.environ['HOME']) \
                    + '/.globus/usercert.pem'
            else:
                raise ExceptionDefinitions.FileNotFoundException('Certificate File', 'Could not locate the certificate file')
    else:
        usercert = args.usercert

    if os.path.exists(usercert):
        pass
    else:
        raise ExceptionDefinitions.FileNotFoundException(usercert, 'Could not locate the certificate file')

    if not args.hostname:
        if os.path.exists(hostfile):
            pass
        else:
            raise ExceptionDefinitions.FileNotFoundException(hostfile, 'Could not locate the hostfile')
    if args.test:
        OIM = True
    else:
        OIM = False

    arguments.update({'vo' : args.vo})
    arguments.update({'mode': OIM})
    arguments.update({'cc_list': args.cc_list})
    arguments = CreateOIMConfig(OIM, **arguments)
    if vars().has_key('args'):
        arguments.update({'args': args})
    if vars().has_key('values'):
        arguments.update({'values': values})
    if vars().has_key('hostname'):
        arguments.update({'hostname': hostname})
    arguments.update({'timeout': timeout})
    print 'The timeout is set to %s' % arguments['timeout']
    arguments.update({'alt_names': args.alt_names})
    arguments.update({'usercert': usercert})
    arguments.update({'userprivkey': userprivkey})
    arguments.update({'certdir': certdir})
    if vars().has_key('hostfile'):
        arguments.update({'hostfile': hostfile})
    arguments.update({'host': arguments['hostsec']})
    return arguments


#################################################



def extract_certs(pkcs7raw, **arguments):
    """This function accepts the hostname, pkcs7raw dump of the certificate and
    a dictionary that consists variables and their value against them.
    It write the certificates to file system by calling write_certificate function"""
    pkcs7_file = tempfile.NamedTemporaryFile()
    pkcs7_file.write(str(pkcs7raw))
    pkcs7_file.flush()
    temp_file = tempfile.NamedTemporaryFile()
    print ''

    # ### printing our all the certificates received from OIM to a temporary file###
    subprocess.call([
        'openssl',
        'pkcs7',
        '-print_certs',
        '-in',
        os.path.abspath(pkcs7_file.name),
        '-out',
        os.path.abspath(temp_file.name),
        ])
    pkcs7_file.close()
    certString = temp_file.read()
    temp_file.close()
    ### Extracting the hostname ###

    hostname = extractHostname(certString)

    ### Extracting the EEC certificate ###

    eecString = extractEEC(certString, hostname)
    arguments.update({'hostname': hostname})
    arguments.update({'eecString': eecString})
    write_certificate(**arguments)
    return


def write_certificate(**arguments):
    """ This function writes the extracted EEC certificate"""
    cwd = os.getcwd()
    try:
        os.chdir(arguments['certdir'])
        os.getcwd()
    except OSError, e:
        charlimit_textwrap('''The directory %s does not exist or you cannot access the directory
    . Please report the bug to goc@opensciencegrid.org:
    %s''' % (arguments['certdir'], e))
        raise OSError
    hostname = arguments['hostname']
    eecString = arguments['eecString']
    hostname = hostname.strip(' \n').replace('/', '-')
    pem_filename = hostname + '.pem'
    temp_file = tempfile.NamedTemporaryFile()
    temp_file.write(eecString)
    temp_file.flush()
    if os.path.exists(pem_filename): ###Fix for already existing cert file ###

        #charlimit_textwrap('The file %s already exists.' % pem_filename)
        old_pem_filename = hostname + "-old.pem"
        subprocess.call(['mv', pem_filename, old_pem_filename])
        print "Renaming existing file from %s to %s" % (os.path.join(arguments['certdir'], pem_filename),
                                                        os.path.join(arguments['certdir'], old_pem_filename))
        #pem_filename = '%s-%s.%s' % (hostname, arguments['reqid'], 'pem'
                #)
    subprocess.call(['cp', os.path.abspath(temp_file.name), pem_filename])  ### fix for move the file to desired name ###
    os.chmod(pem_filename, 0644)

    os.chdir(cwd)
    charlimit_textwrap('Certificate written to %s' % os.path.join(arguments['certdir'], pem_filename))
    temp_file.close()
    return

    # The slice and dice on the JSON output to get the certificate out
    # happens here - the problem is that the new lines are getting all screwy
    # in the output from OIM. We stringify the data, replace all the text
    # newline characters with actual new lines and the strip off the
    # extra data.


def process_pkcs7(pkcs7, num_requests, **arguments):
    """Method to seperate the processing of pkcs7 string from the certificate retrieval logic"""
    cert_num = 0
    for certstring in pkcs7:
        extract_certs(certstring, **arguments)
        cert_num = cert_num + 1

    if cert_num != num_requests:
        raise ExceptionDefinitions.CertificateMismatchException(num_requests, cert_num, 'Request and certificate received mismatch')
    return


def create_certificate_request(hostname, reqid, config_items):
    """This function accepts hostname, request id and a dictionary of config_items for the CSR.
    It writes the key and creates the CSR."""

    print 'Generating certificate...'
    keypath = os.path.join(arguments['certdir'], hostname + '-key.pem')
    # Handle already existing key file...
    if os.path.exists(keypath):
        old_keypath = os.path.join(arguments['certdir'], hostname + "-key-old.pem")
        print "Renaming existing key from %s to %s" % (keypath, old_keypath)
        os.rename(keypath, old_keypath)
    cert_obj = OSGPKIUtils.Cert()
    cert_obj.CreatePKey(keypath)
    charlimit_textwrap('Writing key to %s' % keypath)
    new_csr = cert_obj.CreateX509Request(**config_items)
    csr = \
        new_csr.as_pem().replace('-----BEGIN CERTIFICATE REQUEST-----\n', '').\
        replace('-----END CERTIFICATE REQUEST-----\n', '')
    return csr


def check_quota_limit(request_count, arguments):
    '''This function checks if the quota requirements for the user is met for the particular request'''

    headers = {'Content-type': arguments['content_type'],
               'User-Agent': 'OIMGridAPIClient/0.1 (OIM Grid API)'}
    conn = M2Crypto.httpslib.HTTPSConnection(arguments['host'], ssl_context=arguments['ssl_context'])
    try:
        conn.request('GET', arguments['quotaurl'], None, headers)
        response = conn.getresponse()
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed: %s'
                           % (arguments['quotaurl'], e))
        raise httplib.HTTPException
    except M2Crypto.SSL.SSLError, e:
        raise M2Crypto.SSL.SSLError, e

    except Exception, e:
        if "sslv3 alert bad certificate" in e:
            raise ExceptionDefinitions.BadCertificateException("Error connecting to server: %s.\n" + \
                                          "Your certificate is not trusted by the server" % e)
        else:
            print e.__class__.__name__
            raise
    check_response_500(response)
    data = response.read()
    if not 'PENDING' in response.reason:
        if not 'OK' in response.reason:
            print_failure_reason_exit(data)
    charlimit_textwrap('Waiting for response from Quota Check API. Please wait.')
    iterations = 0
    while 'PENDING' in data:
        conn.request('GET', arguments['quotaurl'], headers)
        try:
            response = conn.getresponse()
        except httplib.HTTPException, e:
            charlimit_textwrap('Connection to %s failed: %s'
                               % (arguments['quotaurl'], e))
            raise httplib.HTTPException
        check_response_500(response)
        data = response.read()
        conn.close()
        iterations = check_for_pending(iterations)
    check_failed_response(data)
    global_hostcert_year_max = \
        simplejson.loads(data)['global_hostcert_year_max']
    global_hostcert_year_count = \
        simplejson.loads(data)['global_hostcert_year_count']
    count_hostcert_day = simplejson.loads(data)['count_hostcert_day']
    quota_hostcert_day_max = \
        simplejson.loads(data)['quota_hostcert_day_max']
    count_hostcert_year = simplejson.loads(data)['count_hostcert_year']
    quota_hostcert_year_max = \
        simplejson.loads(data)['quota_hostcert_year_max']
    if global_hostcert_year_max >= global_hostcert_year_count \
        + request_count and count_hostcert_day + request_count \
        <= quota_hostcert_day_max and count_hostcert_year \
        + request_count <= quota_hostcert_year_max \
        and quota_hostcert_day_max >= request_count:
        status = True
    else:
        status = False
    conn.close()
    return status


def process_csr(num_requests, bulk_csr, **arguments):
    """This function handles the entire processing of the request i.e.
    requesting. checking for quota limit, approving and then retrieving in sequence"""
    capi = ConnectAPI.ConnectAPI()

    try:
        reqid = capi.request_authenticated(bulk_csr, **arguments)
    except KeyError, e:
        raise
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed : %s' % (arguments['requrl'], e))
        raise e

    except Exception, e:
        if 'sslv3 alert bad certificate' in e:
            raise ExceptionDefinitions.BadCertificateException("Error connecting to server: %s.\n" + \
                                          "Your certificate is not trusted by the server" % e)
        else:
            raise

    print 'Id is:', reqid
    arguments.update({'reqid':reqid})

    try:

        print 'Connecting to server to approve certificate...'
        capi.approve(**arguments)

        print 'Issuing certificate...'
        pkcs7raw = capi.retrieve_authenticated(**arguments)
        process_pkcs7(pkcs7raw, num_requests, **arguments)

    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed: %s'% (arguments['newrequrl'], e))
        raise e
    except Exception, e:
        if 'sslv3 alert bad certificate' in e:
            raise ExceptionDefinitions.BadCertificateException("Error connecting to server: %s.\n" + \
                                          "Your certificate is not trusted by the server" % e)
        else:
            raise
    return

def process_single_host_mode(**arguments):
    '''Create and process a single CSR with the --hostname option treated as
    the CN and the --altname's treated as the alternative names'''

    num_requests = 1
    config_items = {}

    if not check_quota_limit(num_requests, arguments):
        raise ExceptionDefinitions.QuotaException('Your request would exceed your quota. Aborting')
    hostname = arguments['hostname'].strip()
    config_items.update({'CN': hostname, 'alt_names': arguments['alt_names']})
    charlimit_textwrap('Beginning request process for %s' % hostname)
    # Remove / from service requests for proper FQDN formatting
    csr = create_certificate_request(hostname.replace('/', '-'), num_requests, config_items)
    process_csr(num_requests, csr, **arguments)
    return


def process_hostfile_mode(**arguments):
    '''Create and process CSRs for each line in the user-specified hostfile.
    Each line may contain multiple hostnames (space delimited), the first one
    is considered the CN and the rest are considered alternative names'''

    bulk_csr = list()
    num_requests = 0
    host_set = set()
    config_items = {}
    request_count = get_request_count(arguments['hostfile'])

    hosts_file = open(arguments['hostfile'], 'rb')
    hosts = hosts_file.readlines()
    hosts_file.close()

    if not check_quota_limit(request_count, arguments):
        raise ExceptionDefinitions.QuotaException('Your request would exceed your quota. Aborting')
    for line in hosts:
        line = line.strip()
        if line != '' and line not in host_set:
            host_set.add(line)
            num_requests += 1
            # Take the first hostname as the CN and the rest as SANs
            sans = line.split()
            hostname = sans.pop(0)
            config_items.update({'CN': hostname, 'alt_names': sans})
            charlimit_textwrap('Beginning request process for %s' % line)
            # Remove / from service requests for proper FQDN formatting
            csr = create_certificate_request(hostname.replace('/', '-'), num_requests, config_items)
            bulk_csr.append(csr)
            if num_requests == 50: # OIM limits bulk requests to 50 CSRs
                break
    if num_requests > 0:
        process_csr(request_count, bulk_csr, **arguments)

if __name__ == '__main__':
    try:
        os.umask(0177)
        arguments = parse_args()
        OSGPKIUtils.start_timeout_clock(arguments['timeout']*60)
        check_permissions(arguments['certdir'])
        ssl_context = get_ssl_context(**arguments)
        arguments.update({'ssl_context':ssl_context})

        # Request cert(s)
        if not arguments.has_key('hostname'):
            process_hostfile_mode(**arguments)
        else:
            process_single_host_mode(**arguments)

    except AttributeError, e:
        print_exception_message(e)
        sys.exit(1)
    except SystemExit, e:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise e
    except SSLError, e:
        print_exception_message(e)
        sys.exit('Please check for valid certificate.\n')
    except KeyboardInterrupt, exc:
        print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except OSError, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.Exception_500response, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except KeyError, e:
        print_exception_message(e)
        charlimit_textwrap('Key %s not found' % e)
    except httplib.HTTPException, e:
        print_exception_message(e)
        charlimit_textwrap('Connection failed: %s' % (e))
    except ExceptionDefinitions.FileWriteException, e:
        charlimit_textwrap(e.message)
        charlimit_textwrap("The script will exit now\n")
        sys.exit(1)
    except ExceptionDefinitions.FileNotFoundException, e:
        charlimit_textwrap(e.message + ':' + e.filename)
        sys.exit(1)
    except ValueError, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.NotOKException, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except ExceptionDefinitions.CertificateMismatchException, e:
        print 'The number of requests made was ', e.request_num
        print 'The number of certificates received is ', e.retrieve_num
        charlimit_textwrap(e.message)
        sys.exit(1)
    except EOFError, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.BadCertificateException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except ExceptionDefinitions.BadPassphraseException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except ExceptionDefinitions.HandshakeFailureException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except ExceptionDefinitions.QuotaException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except M2Crypto.SSL.SSLError, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.UnexpectedBehaviourException, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.InsufficientArgumentException, e:
        # I agree with mat on JIRA Software 1072 on that if a user enters
        # the script without options, there is no bug and shouldn't be
        # reported to goc. Hence bypassing call to print exception message
        charlimit_textwrap(e.message)
        sys.stderr.write("Usage: osg-gridadmin-cert-request -h for help \n")
        sys.exit(2) # Fix for returning exit code of 2 as in all the other scripts.
    except Exception, e:
        print_uncaught_exception()
        charlimit_textwrap('Uncaught Exception : Please report the bug to goc@opensciencegrid.org.')
        sys.exit(1)
    sys.exit(0)
