#!/usr/bin/python
# -*- coding: utf-8 -*-

import urllib
import httplib
import sys
import simplejson
import re
import os
import errno
import getpass
import base64
import M2Crypto
from optparse import OptionParser
from ssl import SSLError

from osgpkitools.OSGPKIUtils import CreateOIMConfig
from osgpkitools.OSGPKIUtils import get_ssl_context
from osgpkitools.OSGPKIUtils import check_response_500
from osgpkitools.OSGPKIUtils import check_failed_response
from osgpkitools.OSGPKIUtils import print_failure_reason_exit
from osgpkitools.OSGPKIUtils import check_for_pending
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import print_uncaught_exception
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.ExceptionDefinitions import *



# Set up Option Parser

def parse_args():
    """This function parses all the arguments, validates them and then stores them
    in a dictionary that is used throughout the script."""

    usage = \
        'usage: %prog [options]\nUsage:%prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    parser.add_option(
        '-k',
        '--pkey',
        action='store',
        dest='userprivkey',
        help="Specify Requestor's private key (PEM Format). If not specified \
 will take the value of X509_USER_KEY or $HOME/.globus/userkey.pem",
        metavar='PKEY',
        default=None,
        )
    parser.add_option(
        '-c',
        '--cert',
        action='store',
        dest='usercert',
        help="Specify Requestor's certificate (PEM Format).\n If not specified\
 will take the value of X509_USER_CERT or $HOME/.globus/usercert.pem",
        default=None,
        metavar='CERT',
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='Run in test mode',
        default=False,
        )
    parser.add_option(
        '-t',
        '--timeout',
        action='store',
        dest='timeout',
        help='Specify the timeout in minutes',
        default=5,
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        default='.',
        help="Write the output files to this directory",
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    (args, values) = parser.parse_args()
    arguments = dict()

    if args.version_info:
        version_info()
        sys.exit(1)

    try:
        timeout = int(args.timeout)
        if not timeout > 0:
            raise ValueError
    except ValueError:
        raise ValueError('Invalid timeout value. Please enter an integer value greater than zero.\n')
    print 'Using timeout of %d minutes' % timeout

    if args.userprivkey:
        userprivkey = args.userprivkey
    else:
        try:
            userprivkey = os.environ['X509_USER_KEY']
        except KeyError:
            try:
                userprivkey = os.environ['HOME'] + '/.globus/userkey.pem'
            except KeyError:
                userprivkey = ''

    if not os.path.exists(userprivkey):
        raise FileNotFoundException(userprivkey, 'Could not locate the private key file')

    if args.usercert:
        usercert = args.usercert
    else:
        try:
            usercert = os.environ['X509_USER_CERT']
        except KeyError:
            try:
                usercert = os.environ['HOME'] + '/.globus/usercert.pem'
            except KeyError:
                usercert = ''

    if not os.path.exists(usercert):
        raise FileNotFoundException(usercert, 'Could not locate the certificate file')

    # Check write directory existence and write permission
    try:
        if not os.access(args.write_directory, os.W_OK):
            raise FileWriteException('Do not have write permissions to %s' % args.write_directory)
    except OSError, e:
        if e.errno == errno.ENOENT:
            raise FileNotFoundException(args.write_directory, 'Could not locate the output directory')
        else:
            raise

    arguments = CreateOIMConfig(args.test, **arguments)
    arguments.update({'timeout': timeout})
    arguments.update({'usercert': usercert})
    arguments.update({'userprivkey': userprivkey})
    arguments.update({'certdir': args.write_directory})
    return arguments


#################################################

# We make the renew request here, and pass the serial number
# of the certificate to be renews. It gets back the request ID
# which can be used to retrieve the certificate

def connect_renew(**arguments):
    """This function connects to the user renew API and passes the DN
    and the serial number to API to get back the request ID.
    """

    while True:
        password = 'password'
        second_password = 'second_password'

        # We should have the user enter their password twice
        pass_msg = 'Enter password to encrypt new PKCS12 file: '
        verify_pass_msg = 'Verifying - ' + pass_msg
        password = getpass.getpass(pass_msg)
        second_password = getpass.getpass(verify_pass_msg)
        # make sure they match
        while password != second_password:
            charlimit_textwrap('Passwords mismatch, please re-enter.')
            password = getpass.getpass(pass_msg)
            second_password = getpass.getpass(verify_pass_msg)

        charlimit_textwrap('Connecting to server to renew certificate...')
        params = urllib.urlencode({'serial_id': arguments['serial_number'].strip('\n'),
                                   'password': password}, doseq=True)

        headers = {'Content-type': arguments['content_type'],
                   'User-Agent': 'OIMGridAPIClient/0.1 (OIM Grid API)'}
        conn = M2Crypto.httpslib.HTTPSConnection(arguments['hostsec'],
                                                 ssl_context=arguments['ssl_context'])
        try:
            conn.request('POST', arguments['renewurl'], params, headers)
            try:
                arguments['ssl_session'] = conn.get_session()
            except AttributeError:
                arguments['ssl_session'] = conn.sock.get_session()
            response = conn.getresponse()
        except httplib.HTTPException, e:
            charlimit_textwrap('Connection to %s failed : %s' % (arguments['renewurl'], e))
            raise e
        data = response.read()
        if re.search('Password is too weak', data):
            charlimit_textwrap('Passwords must be > 12 characters and have no easy or repeating sequences. Please try again.')
            continue
        else:
            arguments['cookie'] = response.getheader('set-cookie')
            break

    #This if block is to catch failures and would exit the script
    if not 'OK' in response.reason:
        print_failure_reason_exit(data)
    conn.close()
    check_failed_response(data)
    return_data = simplejson.loads(data)
    request_id = return_data['request_id']
    if not request_id:
        raise UnexpectedBehaviourException("Request Id not found in data. Script will now exit")
    arguments.update({'reqid': request_id})
    return arguments


def write_certificate(pkcs12, arguments):
    """ This function writes the pkcs12 file"""
    pkcs12_filename = '%s/user_certificate_and_key.U%s.p12' % (arguments['certdir'], arguments['reqid'])
    old_pkcs12_filename_base = pkcs12_filename + '.bak'

    if os.path.exists(pkcs12_filename):
        iterator = 0
        old_pkcs12_filename = old_pkcs12_filename_base
        while os.path.exists(old_pkcs12_filename):
            old_pkcs12_filename = '%s.%s' % (old_pkcs12_filename_base, iterator)
            iterator += 1
        os.rename(pkcs12_filename, old_pkcs12_filename)
        charlimit_textwrap('Backed up existing PKCS12 file to %s' % old_pkcs12_filename)

    pkcs12_file = open(pkcs12_filename, 'w')
    pkcs12_file.write(pkcs12)
    pkcs12_file.close()
    charlimit_textwrap('Wrote new PKSC12 file to %s' % pkcs12_filename)
    return


def connect_retrieve(**arguments):
    """This function accepts a dictionary consisting of variables and their values against it.
    It retrieves the certificate from the OIM."""

    charlimit_textwrap('Issuing certificate...')
    params = urllib.urlencode({'user_request_id': arguments['reqid']}, True)
    headers = {'Content-type': arguments['content_type'],
               'User-Agent': 'OIMGridAPIClient/0.1 (OIM Grid API)',
               'Cookie': arguments['cookie']}
    conn = M2Crypto.httpslib.HTTPSConnection(arguments['hostsec'],
                                             ssl_context=arguments['ssl_context'])
    try:
        try:
            conn.set_session(arguments['ssl_session'])
        except AttributeError:
            conn.session = arguments['ssl_session']
        conn.request('POST', arguments['userreturl'], params, headers)
        response = conn.getresponse()
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s%s failed: %s' % (arguments['hostsec'], arguments['userreturl'], e))
        raise httplib.HTTPException
    check_response_500(response)
    json = response.read()

    if not 'PENDING' in response.reason:
        if not 'OK' in response.reason:
            print_failure_reason_exit(data)
    conn.close()
    charlimit_textwrap('Waiting for response from Certificate Authority. Please wait.')

    iterations = 0
    while 'PENDING' in json:
        conn = M2Crypto.httpslib.HTTPSConnection(arguments['hostsec'],
                                                 ssl_context=arguments['ssl_context']) # we have to reconnect
        try:
            conn.set_session(arguments['ssl_session'])
        except AttributeError:
            conn.session = arguments['ssl_session']
        conn.request('POST', arguments['userreturl'], params, headers)
        try:
            response = conn.getresponse()
        except httplib.HTTPException, e:
            charlimit_textwrap('Connection to %s%s failed: %s' % (arguments['hostsec'], arguments['userreturl'], e))
            raise httplib.HTTPException
        check_response_500(response)
        json = response.read()
        iterations = check_for_pending(iterations)
    conn.close()
    check_failed_response(json)
    data = simplejson.loads(json)
    pkcs12 = base64.b64decode(data['pkcs12'])

    write_certificate(pkcs12, arguments)
    print "To import user certificate on your browser:\n" + \
        "https://confluence.grid.iu.edu/pages/viewpage.action?pageId=3244066"
    print "To extract your keypair for use on the command line:\n" + \
        "https://confluence.grid.iu.edu/display/CENTRAL/Importing+User+Certificate+for+Command+Line+Use"
    return

def process_csr(**arguments):
    """This function handles the entire processing of the request i.e.
    requesting and then retrieving in sequence"""
    try:
        arguments = connect_renew(**arguments)
    except Exception, e:
        if 'sslv3 alert bad certificate' in e:
            raise BadCertificateException('Error connecting to server: %s.\n' +
                                          'Your certificate is not trusted by the server' % e)
        else:
            print_uncaught_exception()
            raise
    connect_retrieve(**arguments)
    return


def process_renew(**arguments):
    """This function would in turn call process csr function"""
    process_csr(**arguments)
    return

def extract_info(**arguments):
    """ Extracts the DN from the certificate provided."""
    x509 = M2Crypto.X509.load_cert(arguments['usercert'])
    dec_sid = x509.get_serial_number()
    hex_sid = "%032X" % dec_sid
    arguments.update({'serial_number':hex_sid})
    DN = x509.get_issuer()
    arguments.update({'DN':DN})
    return arguments

if __name__ == '__main__':
    try:
        os.umask(0177)
        arguments = parse_args()
        OSGPKIUtils.start_timeout_clock(arguments['timeout'])
        arguments['ssl_context'] = get_ssl_context(**arguments)
        arguments = extract_info(**arguments)
        process_renew(**arguments)
    except AttributeError, e:
        print_exception_message(e)
        sys.exit(1)
    except SystemExit, e:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except SSLError, e:
        print_exception_message(e)
        sys.exit('Please check for valid certificate.\n')
    except KeyboardInterrupt, e:
        print_exception_message(e)
        sys.exit('''Interrupted by user\n''')
    except OSError, e:
        print_exception_message(e)
        sys.exit(1)
    except Exception_500response, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except FileNotFoundException, e:
        charlimit_textwrap(e.message + ':' + e.filename)
        sys.exit(1)
    except FileWriteException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except ValueError, e:
        print_exception_message(e)
        sys.exit(1)
    except NotOKException, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except CertificateMismatchException, e:
        print 'The number of requests made was ', e.request_num
        print 'The number of certificates received is ', e.retrieve_num
        charlimit_textwrap(e.message)
        sys.exit(1)
    except EOFError, e:
        print_exception_message(e)
        sys.exit(1)
    except BadCertificateException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except BadPassphraseException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except HandshakeFailureException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except QuotaException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except UnexpectedBehaviourException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except InsufficientArgumentException, e:
        charlimit_textwrap(e.message)
        sys.exit(1)
    except Exception, e:
        print_uncaught_exception()
        charlimit_textwrap('Uncaught Exception : Please report the bug to goc@opensciencegrid.org.')
        sys.exit(1)
    sys.exit(0)
