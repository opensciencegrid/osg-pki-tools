#! /usr/bin/env python

import sys
import urllib
import httplib
from M2Crypto import httpslib, SSL
import simplejson
import traceback
import os
from optparse import OptionParser

from osgpkitools import ExceptionDefinitions
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import CreateOIMConfig
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import check_response_500
from osgpkitools.OSGPKIUtils import get_ssl_context
from osgpkitools.OSGPKIUtils import version_info

def parse_args():
    """This function parses all the arguments, validates them and then
    stores them in a dictionary that is used throughout in the script."""

    usage = \
        'usage: %prog [options] <Request ID> <message>\nUsage: %prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    parser.add_option(
        '-n',
        '--certid',
        action='store_true',
        dest='certid',
        help='Treat the ID argument as the serial ID# for the certificate to be revoked',
        metavar='Certificate ID',
        default=False
        )
    parser.add_option(
        '-u',
        '--user',
        action='store_true',
        dest='user',
        help='Certificate to be revoked is a user certificate. Redundant when using `osg-user-cert-revoke`.',
        default=False
        )
    parser.add_option(
        '-k',
        '--pkey',
        action='store',
        dest='userprivkey',
        help="Specify Requestor's private key (PEM Format). If not specified, " \
             "this takes the value of X509_USER_KEY or $HOME/.globus/userkey.pem",
        metavar='PKEY',
        default=None,
        )
    parser.add_option(
        '-c',
        '--cert',
        action='store',
        dest='usercert',
        help="Specify Requestor's certificate (PEM Format). If not specified, " \
             "this takes the value of X509_USER_CERT or $HOME/.globus/usercert.pem",
        default=None,
        metavar='CERT',
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='Run in test mode',
        default=False,
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    parser.add_option(
        '-m',
        '--message',
        action='store',
        dest='message',
        help="Specify the reason for certificate revocation [deprecated]",
        default=None,
        metavar='REASON',
        )
    parser.add_option(
        '-i',
        '--id',
        action='store_true',
        dest='id',
        help='Specify ID# of certificate to be retrieved [deprecated]',
        metavar='ID',
        default=False
        )

    (args, values) = parser.parse_args()
    if args.version_info:
        version_info()
        sys.exit(0)

    # Print deprecation messages
    if args.id:
        charlimit_textwrap("The '-i' flag is deprecated and no longer needed when specifying a request ID.")
    if args.message:
        charlimit_textwrap("The '-m' flag is deprecated and no longer needed when specifying a message.")

    # Get command line arguments
    num_args = len(values)
    if num_args >= 1 and num_args <= 2:
        # Since the ID flag is a boolean, the number of arguments should be at least 1 and at most 2.
        reqid = values[0]
        try:
            args.message = values[1]
        except IndexError: # Missing second argument
            if not args.message:
                parser.error("Wrong number of arguments (%s of 2): %s"
                             % (num_args, ', '.join(str(value) for value in values)))
    else:
        if args.message:
            parser.error("Wrong number of arguments (%s of 1): %s"
                         % (num_args, ', '.join(str(value) for value in values)))
        else:
            parser.error("Wrong number of arguments (%s of 2): %s"
                         % (num_args, ', '.join(str(value) for value in values)))

    arguments = dict()
    arguments = CreateOIMConfig(args.test, **arguments)

    if args.userprivkey is None:
        try:
            userprivkey = os.environ['X509_USER_KEY']
        except:
            if os.path.exists(str(os.environ['HOME'])
                              + '/.globus/userkey.pem'):
                userprivkey = str(os.environ['HOME']) \
                    + '/.globus/userkey.pem'
            else:
                raise ExceptionDefinitions.FileNotFoundException('Key file',
                                                                 'Could not locate the private key file')
    else:
        userprivkey = args.userprivkey

    if not os.path.exists(userprivkey):
        raise ExceptionDefinitions.FileNotFoundException(userprivkey, 'Could not locate the private key file')
    if args.usercert is None:
        try:
            usercert = os.environ['X509_USER_CERT']
        except KeyError:
            usercert = str(os.environ['HOME']) + '/.globus/usercert.pem'
            if os.path.exists(str(os.environ['HOME'])
                              + '/.globus/usercert.pem'):
                usercert = str(os.environ['HOME']) \
                    + '/.globus/usercert.pem'
            else:
                raise ExceptionDefinitions.FileNotFoundException('Certificate File',
                                                                 'Could not locate the certificate file')
    else:
        usercert = args.usercert

    if not os.path.exists(usercert):
        raise ExceptionDefinitions.FileNotFoundException(usercert, 'Could not locate the certificate file')

    arguments.update({'certid': args.certid})
    arguments.update({'id': reqid})
    arguments.update({'message': args.message})
    arguments.update({'user': args.user})
    arguments.update({'usercert': usercert})
    arguments.update({'userprivkey': userprivkey})

    return arguments

def connect_revoke(**arguments):
    """This function accepts an ssl_context instance which contains
    information about the established ssl connection and a dictionary consisting
    of all parameters and their values,
    it returns the response from the OIM server for the user request.

    HOST REVOCATION INPUTS:
    Arguments: A dict containing,
        hostsec      - URL of the OIM server using HTTPS
        ssl_context  - Context for the ssl connection for current session.
        revurl       - URL for requesting revocation of the host certificate.
        content_type - Content type for the data to be sent.
        id           - Request ID for the host certificate.
        message      - Message to be sent on the OIM server as reason for revocation.

    USER REVOCATION INPUTS:
    Arguments: A dict containing
        hostsec      - URL of the OIM server using HTTPS
        ssl_context  - Context for the ssl connection for current session.
        userrevurl   - URL for requesting revocation of the host certificate.
        content_type - Content type for the data to be sent.
        id           - Request ID for the host certificate.
        message      - Message to be sent on the OIM server as reason for revocation.

    OUTPUT:
        Returns nothing, printing if the revocation was successful or not on the terminal.
    """

    revoke_text = {}
    if arguments['user']:
        id_type = 'user_request_id'
        url = 'userrevurl'
        revoke_text = {'cert_type': 'user'}
    else:
        id_type = 'host_request_id'
        url = 'revurl'
        revoke_text = {'cert_type': 'host'}

    if arguments['certid']:
        id_type = 'serial_id'
        revoke_text['id_type'] = 'certificate'
    else:
        revoke_text['id_type'] = 'request'

    params = urllib.urlencode({id_type: arguments['id'],
                               'request_comment':arguments['message']})
    headers = {'Content-type': arguments['content_type'],
               'User-Agent': 'OIMGridAPIClient/0.1 (OIM Grid API)'}

    charlimit_textwrap('Contacting Server to revoke the %s certificate...' % revoke_text['cert_type'])

    conn = httpslib.HTTPSConnection(arguments['hostsec'],
                                    ssl_context=arguments['ssl_context'])
    try:
        conn.request('POST', arguments[url], params, headers)
        response = conn.getresponse()
    except httplib.HTTPException, e:
        charlimit_textwrap('Connection to %s failed: %s'
                           % (arguments[url], repr(e)))
        raise e
    except SSL.SSLError, exc:
        charlimit_textwrap("="*80 + "ERROR: There was an issue with your credentials!")
        charlimit_textwrap(exc.message)
        sys.exit(1)
    check_response_500(response)
    if not 'OK' in response.reason:
        raise ExceptionDefinitions.NotOKException(response.status, response.message)
    data = response.read()
    conn.close()

    if simplejson.loads(data)['status'] == 'OK':
        charlimit_textwrap("Successfully revoked %s certificate with %s ID: %s" %
                           (revoke_text['cert_type'], revoke_text['id_type'], str(arguments['id'])))
    else:
        charlimit_textwrap("Failure, could not revoke certificate.")
        charlimit_textwrap(simplejson.loads(data)['detail'])
        sys.exit(1)

if __name__ == "__main__":
    try:
        arguments = parse_args()
        ssl_context = get_ssl_context(**arguments)
        arguments.update({'ssl_context': ssl_context})
        connect_revoke(**arguments)

    except ExceptionDefinitions.FileNotFoundException, e:
        print_exception_message(e)

    except ExceptionDefinitions.BadCertificateException, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.HandshakeFailureException, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.BadPassphraseException, e:
        charlimit_textwrap("Invalid passphrase entered, please try running the script again.")
        sys.exit(1)
    except KeyError, e:
        print_exception_message(e)
        sys.exit(1)
    except httplib.HTTPException, e:
        print_exception_message(e)
        sys.exit(1)
    except AttributeError, e:
        print_exception_message(e)
        sys.exit(1)
    except ExceptionDefinitions.NotOKException, e:
        charlimit_textwrap('Request Failed. Status %s' % e.status)
        charlimit_textwrap('Reason for failure %s' % e.message)
        sys.exit(1)
    except SystemExit:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except Exception, e:
        print traceback.print_exc(e)
        charlimit_textwrap('Uncaught Exception : Please report the bug to goc@opensciencegrid.org.')
    sys.exit(0)
